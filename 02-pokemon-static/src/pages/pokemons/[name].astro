---
import PokemonCard from "@components/PokemonCard.astro";
import Layout from "@layouts/Layout.astro";
import Title from "@components/Title.astro";
import HeartFill from "@components/HeartFill.astro";
import HeartOutline from "@components/HeartOutline.astro";

import type { PokemonListResponse } from "../../interfaces/pokemon-list.response";
import type { GetStaticPaths } from "astro";

const { name } = Astro.params;
const { url } = Astro.props;

export const getStaticPaths = (async () => {
  const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=1302");
  const { results } = (await response.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name: name },
    props: { name: name, url: url },
  }));
}) satisfies GetStaticPaths;

const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<Layout
  title=`Pokemon #${id} ${name}`
  description=`InformaciÃ³n del Pokemon ${name}`
  image={imageSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex">
      <div>
        <button
          class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          onclick="history.back()">Regresar</button
        >
        <Title>{name}</Title>
      </div>

      <button
        id="btn-favorite"
        data-name={name}
        data-id={id}
        class="ml-4 hover:animate-pulse"
        ><HeartOutline class="size-16 data-outline text-red-600" /><HeartFill
          class="size-16 hidden data-full text-red-600"
        /></button
      >
    </div>

    <PokemonCard name={name} url={url} isBig={true} />
    <audio controls src={audioSrc}></audio>
  </section>
</Layout>

<script>
  interface FavoritePokemon {
    name: string;
    id: number;
  }

  document.addEventListener("astro:page-load", () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;
    const name = btnFavorite.dataset.name ?? '';
    const id = btnFavorite.dataset.id ?? '';

    const heartOutline = document.querySelector(".data-outline") as HTMLElement;
    const heartFull = document.querySelector(".data-full") as HTMLElement;
    const isFavorite = favoritePokemons.some((fav) => fav.name === name)
    
    if (isFavorite){
      heartOutline.classList.add('hidden');
      heartFull.classList.remove('hidden')
    }


    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name)

      if (isFavorite){
        favoritePokemons.filter((fav)=> fav.name !== name)
      } else {
        favoritePokemons.push({
          id: +id,
          name: name,
        })
      }

      localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
    }

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");
      toggleFavorite();
    });
  });
</script>
